script:
    - function.ng

config:
    entry_point:       S
    grammar_pool:      1024
    input_pool:        16

cast_boolean_1: { input: "boolean, true", check: { value: true } }
cast_boolean_2: { input: "boolean, false", check: { value: false } }

cast_integer_1: { input: "integer, 0", check: { value: 0 } }
cast_integer_2: { input: "integer, +0", check: { value: 0 } }
cast_integer_3: { input: "integer, -0", check: { value: 0 } }
cast_integer_4: { input: "integer, -1", check: { value: -1 } }
cast_integer_5: { input: "integer, +1", check: { value: 1 } }
cast_integer_6: { input: "integer, 123", check: { value: 123 } }
cast_integer_7: { input: "integer, NaN", error: [[ "bad lexical cast: source type value could not be interpreted as target", 4, 37 ]] }

cast_real_1a: { input: "real, 0", check: { value: 0 } }
cast_real_2a: { input: "real, 0.0", check: { value: 0 } }
cast_real_3a: { input: "real, 0.0e0", check: { value: 0 } }
cast_real_4a: { input: "real, 0.0e-1", check: { value: 0 } }
cast_real_5a: { input: "real, 0.0e+1", check: { value: 0 } }
cast_real_1b: { input: "real, -0", check: { value: 0 } }
cast_real_2b: { input: "real, -0.0", check: { value: 0 } }
cast_real_3b: { input: "real, -0.0e0", check: { value: 0 } }
cast_real_4b: { input: "real, -0.0e-1", check: { value: 0 } }
cast_real_5b: { input: "real, -0.0e+1", check: { value: 0 } }
cast_real_1c: { input: "real, +0", check: { value: 0 } }
cast_real_2c: { input: "real, +0.0", check: { value: 0 } }
cast_real_3c: { input: "real, +0.0e0", check: { value: 0 } }
cast_real_4c: { input: "real, +0.0e-1", check: { value: 0 } }
cast_real_5c: { input: "real, +0.0e+1", check: { value: 0 } }
cast_real_2: { input: "real, -1.2", check: { value: -1.2 } }
cast_real_3: { input: "real, +1.2", check: { value: 1.2 } }
cast_real_4: { input: "real, 12.3", check: { value: 12.3 } }
cast_real_5: { input: "real, 3.14e2", check: { value: 314 } }

cast_string: { input: "string, world", check: { value: "world" } }

cast_array: { input: "array, world", check: { value: "{0: world}" } }

pass_yes: { input: "pass, yes", config: { exp: "yes" }, check: { skip: true } }
pass_no: { input: "pass, no", config: { exp: "yes" }, check: { skip: false } }

stop_yes: { input: "stop, yes", config: { exp: "yes" }, traces: 0 }
stop_no: { input: "stop, no", config: { exp: "yes" }, traces: 1 }

test_len_0: { input: "len,", check: { value: 0 } }
test_len_1: { input: "len, X", check: { value: 1 } }
test_len_5: { input: "len, world", check: { value: 5 } }

test_self_1: { input: "self, alpha, beta, gamma", config: { n : 1 }, check: { "R.value": "alpha" } }
test_self_2: { input: "self, alpha, beta, gamma", config: { n : 2 }, check: { "R.value": "beta" } }
test_self_3: { input: "self, alpha, beta, gamma", config: { n : 3 }, check: { "R.value": "gamma" } }
test_self_4: { input: "self, alpha, beta, gamma", config: { n : 0 }, traces: 1 }
test_self_5: { input: "self, alpha, beta, gamma", config: { n : -1 }, traces: 1 }

test_external_1: { input: "ext, alpha beta", check: { "R.ext": "<beta|alpha>", "R.loc": "[beta*alpha]" } }

test_reference_1: { input: "ref, alpha beta", check: { "R.alpha": "beta" } }

test_call_1: { input: "call, fx alpha beta", check: { "R.value": "[alpha*beta]" } }
test_call_2: { input: "call, Ext.fx alpha beta", check: { "R.value": "<alpha|beta>" } }
test_call_3: { input: "call, nothing alpha beta", traces: 0 }

test_call_ref_1: { input: "call-ref, alpha(beta)", check: { "R.alpha": "beta" } }

test_call_call_1: { input: "call-call, alpha(beta)", check: { "R.alpha": "beta" } }

test_swap_1: { input: "swap, alpha beta", check: { "R.value": "beta,alpha" } }
test_swap_2: { input: "swap, beta alpha", check: { "R.value": "alpha,beta" } }

test_nth_1: { input: "nth, alpha beta gamma delta 1", check: { "R.value": "delta" } }
test_nth_2: { input: "nth, alpha beta gamma delta 2", check: { "R.value": "gamma" } }
test_nth_3: { input: "nth, alpha beta gamma delta 3", check: { "R.value": "beta" } }
