namespace Date;

leap (_y) = (_y % 4 == 0) && (_y % 100 != 0 || _y % 400 == 0);

procedure validate ()
{
    day = integer(day);
    month = integer(month);
    year = integer(len(year)==2 ? (integer(year) < 50 ? '20' : '19') + year : year);
    _days = [ null, 31, 28 + (leap(year) ? 1 : 0), 31, 30,
        31, 30, 31, 31, 30, 31, 30, 31 ];
    stop( 1 > month || month > 12 );
    stop( 1 > day || day > _days[month] );
};

suffix (_d)
{
    switch ((10 <= _d && _d <= 20) ? 0 : d%10) {
    case 1: suffix = 'st'; break;
    case 2: suffix = 'nd'; break;
    case 3: suffix = 'rd'; break;
    default: suffix = 'th';
    }
};

format (_d, _m, _y)
{
    _months = [ null, 'January', 'February', 'March', 'April', 'May',
        'June', 'July', 'August', 'September', 'October',
        'November', 'December' ];
    format = _months[_m] + " $_d" + suffix(_d) + ', ' + _y;
};

month := '[0-9]{1-2}';
day   := '[0-9]{1-2}';
year  := '[0-9]{2,4}';

MDY :=
    $:month     ^[[:punct:]]+ *0 ?
    $:day       ^[[:punct:]]+ *0 ?
    $:year
    { validate(); } ^$;

DMY :=
    $:day       ^[[:punct:]]+ *0 ?
    $:month     ^[[:punct:]]+ *0 ?
    $:year
    { validate(); } ^$;

S := ($MDY |? $DMY) { self({res: format(day, month, year)}); };
