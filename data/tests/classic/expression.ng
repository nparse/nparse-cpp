S := <x:Level4> { value: x.value } ^$;

func apply(_op, _left, _right) {
    switch (_op) {
    case '*':  apply = (_left * _right);  break;
    case '/':  apply = (_left / _right);  break;
    case '%':  apply = (_left % _right);  break;
    case '+':  apply = (_left + _right);  break;
    case '-':  apply = (_left - _right);  break;
    case '<':  apply = (_left < _right);  break;
    case '>':  apply = (_left > _right);  break;
    case '<=': apply = (_left <= _right); break;
    case '=>': apply = (_left >= _right); break;
    case '==': apply = (_left == _right); break;
    case '!=': apply = (_left != _right); break;
    }
};

Level0 :=
        null
        { type = "null"; value = null; }
    ||  true
        { type = "boolean"; value = true; }
    ||  false
        { type = "boolean"; value = false; }
    ||  ^\d+
        { type = "integer"; value = integer($); }
    ||  ^\d*\.\d+([eE][-+]?\d+)?
        { type = "real"; value = real($); }
    ||  '^"(\\\\|\\"|.)*"'
        { type = "string"; value = string($); }
    ||  '(' <x:Level4> { value: x.value } ')'
;

Level1 :=
    <x:Level0> {
        value = x.value;
    }
    (   ('*' | '/' | '%'):op <y:Level0> {
            value = apply(op, value, y.value);
        }
    )*
;

Level2 :=
    <x:Level1> {
        value = x.value;
    }
    (   ('+' | '-'):op <y:Level1> {
            value = apply(op, value, y.value);
        }
    )*
;

Level3 :=
    <x:Level2> {
        value = x.value;
    }
    (   ('<' | '>' | '<=' | '=>'):op <y:Level2> {
            value = apply(op, value, y.value);
        }
    )*
;

Level4 :=
    <x:Level3> {
        value = x.value;
    }
    (   ('==' | '!='):op <y:Level3> {
            value = apply(op, value, y.value);
        }
    )*
;

/*

This is how it could look like with the use of meta grammars:

        Level(SubLevel, Operators) :=
            <x:SubLevel> {
                value = x.value;
            }
            (   <Operators>:op <y:SubLevel> {
                    value = apply(op, value, y.value);
                }
            )* ;

        Level1 = Level( Level0, '*' | '/' | '%' );
        Level2 = Level( Level1, '+' | '-' );

or even cooler:

        Level2 = Level( Level( Level0, '*' | '/' | '%' ), '+' | '-' );

*/
