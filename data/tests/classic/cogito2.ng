// NOTE: Version 2 generates lesser evicted size than versions 0 and 1 because
//       it produces lesser number of contexts.
proc lrc () {
    stop(n == 9);
    n = 1 + n;
};

T := { lrc(); } (
        true
    ||  '(' $T ')'
    ||  not $F
    ||  $T ( or|and|is $T || or $F )
    ||  $F ( or $T || is $F )
    ||  if $T ,? then $T
    ||  if $F ,? then $T|$F
);

F := { lrc(); } (
        false
    ||  '(' $F ')'
    ||  not $T
    ||  $F ( or|and $F || and|is $T )
    ||  $T ( and $F || is $F )
    ||  if $T ,? then $F
);

S :=    $T:P ^$ { result: "it is true, that \"$P\"" }
    ||  $F:P ^$ { result: "it is not true, that \"$P\"" };
