// NOTE: Version 3 generates same evicted size as version 2, however
//       it runs slower because a) it generates temporary context;
//                              b) it uses return statement.
func lrc (_n) {
    stop(_n == 9);
    return 1 + _n;
};

T := { n = lrc(n); } (
        true
    ||  '(' $T ')'
    ||  not $F
    ||  $T ( or|and|is $T || or $F )
    ||  $F ( or $T || is $F )
    ||  if $T ,? then $T
    ||  if $F ,? then $T|$F
);

F := { n = lrc(n); } (
        false
    ||  '(' $F ')'
    ||  not $T
    ||  $F ( or|and $F || and|is $T )
    ||  $T ( and $F || is $F )
    ||  if $T ,? then $F
);

S :=    $T:P ^$ { result: "it is true, that \"$P\"" }
    ||  $F:P ^$ { result: "it is not true, that \"$P\"" };
